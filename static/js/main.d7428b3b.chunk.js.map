{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","_ref","card","handleChoice","flipped","disabled","_jsx","className","children","_jsxs","src","alt","onClick","handleClick","cardImages","matched","App","cards","setCards","useState","turns","setTurns","first","setFirst","second","setSecond","setDisabled","currentPlayer","setCurrentPlayer","player1Score","setPlayer1Score","player2Score","setPlayer2Score","useEffect","shuffleCards","shuffledCards","map","id","Math","random","sort","prevcards","prevScore","resetTurn","setTimeout","isMatch","prev","prevPlayer","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"mPAGO,MAAMA,EAAaC,IAAgD,IAA/C,KAAEC,EAAI,aAAEC,EAAY,QAAEC,EAAO,SAAEC,GAAUJ,EAOlE,OACEK,cAAA,OAAKC,UAAU,OAAMC,SACnBF,cAAA,OAAAE,SACEC,eAAA,OAAKF,UAAWH,EAAU,UAAY,GAAGI,SAAA,CACvCF,cAAA,OAAKC,UAAU,QAAQG,IAAKR,EAAKQ,IAAKC,IAAI,eAC1CL,cAAA,OACEC,UAAU,OACVK,QAbUC,KACbR,GACHF,EAAaD,IAYPQ,IAAI,iBACJC,IAAI,sBCfVG,EAAa,CACjB,CAAEJ,IAAK,aAAcK,SAAS,GAC9B,CAAEL,IAAK,aAAcK,SAAS,GAC9B,CAAEL,IAAK,aAAcK,SAAS,GAC9B,CAAEL,IAAK,aAAcK,SAAS,GAC9B,CAAEL,IAAK,aAAcK,SAAS,GAC9B,CAAEL,IAAK,aAAcK,SAAS,IA4GjBC,MAzGf,WACE,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAOC,GAAYF,mBAAS,IAC5BG,EAAOC,GAAYJ,mBAAS,OAC5BK,EAAQC,GAAaN,mBAAS,OAC9Bd,EAAUqB,GAAeP,oBAAS,IAClCQ,EAAeC,GAAoBT,mBAAS,IAC5CU,EAAcC,GAAmBX,mBAAS,IAC1CY,EAAcC,GAAmBb,mBAAS,GAEjDc,qBAAU,KACRC,MACC,IAEH,MAAMA,EAAeA,KACnB,MAAMC,EAAgB,IAAIrB,KAAeA,GACtCsB,KAAKlC,IAAI,IAAWA,EAAMmC,GAAIC,KAAKC,aACnCC,MAAK,IAAMF,KAAKC,SAAW,KAE9BrB,EAASiB,GACTd,EAAS,GACTK,GAAY,GACZI,EAAgB,GAChBE,EAAgB,GAChBJ,EAAiB,IAGbzB,EAAgBD,IACfG,IACHiB,EAAQG,EAAUvB,GAAQqB,EAASrB,KAKvC+B,qBAAU,KACJX,GAASE,IACXE,GAAY,GAERJ,EAAMZ,MAAQc,EAAOd,KACvBQ,GAAUuB,GACDA,EAAUL,KAAKlC,GAChBA,EAAKQ,MAAQY,EAAMZ,IACd,IAAKR,EAAMa,SAAS,GAEpBb,MAMS,IAAlByB,EACFG,GAAiBY,GAAcA,EAAY,IAE3CV,GAAiBU,GAAcA,EAAY,IAG7CC,GAAU,IAEVC,YAAW,KACTD,GAAU,KACT,QAGN,CAACrB,EAAOE,IAGX,MAAMmB,EAAaE,IACjBtB,EAAS,MACTE,EAAU,MACVJ,GAAUyB,GAASA,EAAO,IAC1BpB,GAAY,GAGPmB,GACHjB,GAAkBmB,GAA+B,IAAfA,EAAmB,EAAI,KAG7D,OACEtC,eAAA,OAAKF,UAAU,MAAKC,SAAA,CAClBF,cAAA,MAAAE,SAAI,cACJF,cAAA,UAAQM,QAASsB,EAAa1B,SAAC,aAE/BC,eAAA,OAAKF,UAAU,aAAYC,SAAA,CACzBC,eAAA,KAAAD,SAAA,CAAG,mBAAiBqB,KACpBpB,eAAA,KAAAD,SAAA,CAAG,mBAAiBuB,QAEtBzB,cAAA,OAAKC,UAAU,iBAAgBC,SAC7BC,eAAA,KAAAD,SAAA,CAAG,0BAAwBmB,OAG7BrB,cAAA,OAAKC,UAAU,YAAWC,SACvBS,EAAMmB,KAAKlC,GACVI,cAACN,EAAU,CACTE,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASoB,GAASpB,IAASsB,GAAUtB,EAAKa,QACnDV,SAAUA,GACLH,EAAKmC,YCzGtBW,IAASC,OACP3C,cAAC4C,IAAMC,WAAU,CAAA3C,SACfF,cAACU,EAAG,MAENoC,SAASC,eAAe,W","file":"static/js/main.d7428b3b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nexport const SingleCard = ({ card, handleChoice, flipped, disabled }) => {\r\n  const handleClick = () => {\r\n    if (!disabled) {\r\n      handleChoice(card);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div>\r\n        <div className={flipped ? \"flipped\" : \"\"}>\r\n          <img className=\"front\" src={card.src} alt=\"card front\" />\r\n          <img\r\n            className=\"back\"\r\n            onClick={handleClick}\r\n            src=\"/img/cover.png\"\r\n            alt=\"card back\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { SingleCard } from \"./components/SingleCard\";\n\nconst cardImages = [\n  { src: \"/img/1.png\", matched: false },\n  { src: \"/img/2.png\", matched: false },\n  { src: \"/img/3.png\", matched: false },\n  { src: \"/img/4.png\", matched: false },\n  { src: \"/img/5.png\", matched: false },\n  { src: \"/img/6.png\", matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [first, setFirst] = useState(null);\n  const [second, setSecond] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  const [player1Score, setPlayer1Score] = useState(0);\n  const [player2Score, setPlayer2Score] = useState(0);\n\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n  // Shuffle cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .map((card) => ({ ...card, id: Math.random() }))\n      .sort(() => Math.random() - 0.5);\n\n    setCards(shuffledCards);\n    setTurns(0);\n    setDisabled(false); // Ensure the game starts enabled\n    setPlayer1Score(0); // Reset Player 1's score\n    setPlayer2Score(0); // Reset Player 2's score\n    setCurrentPlayer(1); // Player 1 starts\n  };\n\n  const handleChoice = (card) => {\n    if (!disabled) {\n      first ? setSecond(card) : setFirst(card);\n    }\n  };\n\n  // Compare 2 choices\n  useEffect(() => {\n    if (first && second) {\n      setDisabled(true); // Disable clicks while comparing\n\n      if (first.src === second.src) {\n        setCards((prevcards) => {\n          return prevcards.map((card) => {\n            if (card.src === first.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n\n        // Update score of current player\n        if (currentPlayer === 1) {\n          setPlayer1Score((prevScore) => prevScore + 1);\n        } else {\n          setPlayer2Score((prevScore) => prevScore + 1);\n        }\n\n        resetTurn(true); // Keep the current player if they get a match\n      } else {\n        setTimeout(() => {\n          resetTurn(false); // Switch player if no match\n        }, 1000);\n      }\n    }\n  }, [first, second]);\n\n  // Reset choices & switch turns if no match\n  const resetTurn = (isMatch) => {\n    setFirst(null);\n    setSecond(null);\n    setTurns((prev) => prev + 1);\n    setDisabled(false);\n\n    // Switch to the other player if no match\n    if (!isMatch) {\n      setCurrentPlayer((prevPlayer) => (prevPlayer === 1 ? 2 : 1));\n    }\n  };\n  return (\n    <div className=\"App\">\n      <h1>PokeMatch</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"scoreboard\">\n        <p>Player 1 Score: {player1Score}</p>\n        <p>Player 2 Score: {player2Score}</p>\n      </div>\n      <div className=\"turn-indicator\">\n        <p>Current Player: Player {currentPlayer}</p>\n      </div>\n\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === first || card === second || card.matched}\n            disabled={disabled}\n            key={card.id}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}